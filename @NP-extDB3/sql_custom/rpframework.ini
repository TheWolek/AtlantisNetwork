[Default]
Version = 1  
;; Used incase there is ever a breaking change, or to inform user in log about a new feature.

Strip Chars = ";[]"
;; List of characters to strip out  
Strip Chars Mode = 0

; --------------------------------------------------------------------------------
; SQL Statements
; --------------------------------------------------------------------------------

[existPlayerInfo]
SQL1_1 = SELECT CASE
SQL1_2 =    WHEN EXISTS(SELECT * FROM users WHERE uid = ?)
SQL1_3 =           THEN 'true' ELSE 'false'
SQL1_4 = END
SQL1_INPUTS = 1



;;SQL Statements can be split up into multiple lines to make more readable. 
;; You can also run multiple SQL Statements via SQL2_1, SQL2_2, SQL3_1 etc..




[existLicense]
SQL1_1 = SELECT CASE
SQL1_2 =    WHEN EXISTS(SELECT * FROM garage WHERE license = ?)
SQL1_3 =           THEN 'true' ELSE 'false'
SQL1_4 = END
SQL1_INPUTS = 1



[updateLicense]
SQL1_1 = UPDATE garage SET license=? WHERE license=?
SQL1_INPUTS = 1, 2

[updateCarUID]
SQL1_1 = UPDATE garage SET owner=? WHERE license=?
SQL1_INPUTS = 1, 2


[updateSpoiler]
SQL1_1 = UPDATE garage SET spoiler=? WHERE license=?
SQL1_INPUTS = 1, 2



[updateVehClass]
SQL1_1 = UPDATE garage SET class=? WHERE license=?
SQL1_INPUTS = 1, 2




[getLicense]
SQL1_1 = SELECT license, class, color, owner FROM garage WHERE license=?;
SQL1_INPUTS = 1


OUTPUT = 1-string, 2-String, 3-String, 4-string






[rallyracetimes]
SQL1_1 = SELECT id, time, name FROM rallyracetimes ORDER BY id ASC LIMIT 3;
OUTPUT = 1-string, 2-string, 3-string

[racetimes]
SQL1_1 = SELECT id, time, name FROM racetimes ORDER BY id ASC LIMIT 3;
OUTPUT = 1-string, 2-string, 3-string

[updateRaceTimeRally]
SQL1_1 = UPDATE rallyracetimes SET time=?, name=? WHERE id=?
SQL1_INPUTS = 1, 2-string, 3



[updateRaceTime]
SQL1_1 = UPDATE racetimes SET time=?, name=? WHERE id=?
SQL1_INPUTS = 1, 2-string, 3




[updateCarParts]
SQL1_1 = UPDATE garage SET windows=?, lights=?, rims=?, finish=?, color=?, spoiler=? WHERE license=?
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7






[updateMayor]
SQL1_1 = UPDATE mayor SET playerguid=? WHERE id=?
SQL1_INPUTS = 1-string, 2




[getUnreadMail]
SQL1_1 = SELECT count(*) FROM mail WHERE readmail='0' AND receiver=?
SQL1_INPUTS = 1

OUTPUT = 1


[readAllMail]
SQL1_1 = UPDATE mail SET readmail='1' WHERE receiver=?
SQL1_INPUTS = 1




[insertPlayerInfo]
SQL1_1 = INSERT INTO users (uid, name, items, cash, bank, cop, ems, position, phoneBackground, messages, statuses, houselevel, housecontent, shopcontent, shopname, mafia, fire, legal, prison, prisonreason, doc, biker, mobster, dmv, da, admin) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26



[updatePrisonReason]
SQL1_1 = UPDATE users SET prisonreason=? WHERE uid=?
SQL1_INPUTS = 1, 2



[updatePrison]
SQL1_1 = UPDATE users SET prison=? WHERE uid=?
SQL1_INPUTS = 1, 2



[updateLegal]
SQL1_1 = UPDATE users SET legal=? WHERE uid=?
SQL1_INPUTS = 1, 2



[updateCop]
SQL1_1 = UPDATE users SET cop=? WHERE uid=?
SQL1_INPUTS = 1, 2



[updateEMS]
SQL1_1 = UPDATE users SET ems=? WHERE uid=?
SQL1_INPUTS = 1, 2



[updateMafia]
SQL1_1 = UPDATE users SET mafia=? WHERE uid=?
SQL1_INPUTS = 1, 2



[updateDMV]
SQL1_1 = UPDATE users SET dmv=? WHERE uid=?
SQL1_INPUTS = 1, 2



[updateDA]
SQL1_1 = UPDATE users SET da=? WHERE uid=?
SQL1_INPUTS = 1, 2



[updatedoc]
SQL1_1 = UPDATE users SET doc=? WHERE uid=?
SQL1_INPUTS = 1, 2



[updateBiker]
SQL1_1 = UPDATE users SET Biker=? WHERE uid=?
SQL1_INPUTS = 1, 2



[updateMobster]
SQL1_1 = UPDATE users SET mobster=? WHERE uid=?
SQL1_INPUTS = 1, 2



[updateFire]
SQL1_1 = UPDATE users SET fire=? WHERE uid=?
SQL1_INPUTS = 1, 2



[updateHouse]
SQL1_1 = UPDATE users SET housecontent=? WHERE uid=?
SQL1_INPUTS = 1, 2




[updateShop]
SQL1_1 = UPDATE users SET shopcontent=? WHERE uid=?
SQL1_INPUTS = 1, 2



[updateShopName]
SQL1_1 = UPDATE users SET shopname=? WHERE uid=?
SQL1_INPUTS = 1, 2



[updatePhoneBG]
SQL1_1 = UPDATE users SET phoneBackground=? WHERE uid=?
SQL1_INPUTS = 1, 2




[updatePlayerInfoNoGear]
SQL1_1 = UPDATE users SET cash=?, bank=?, position=?, messages=?, statuses=?, housecontent=?, shopcontent=?, phoneBackground=?, houselevel=?, name=? WHERE uid=?
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11



[updatePlayerInfo]
SQL1_1 = UPDATE users SET items=?, cash=?, bank=?, position=?, messages=?, statuses=?, housecontent=?, shopcontent=?, phoneBackground=?, houselevel=?, name=? WHERE uid=?
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12



[playerInfo]
SQL1_1 = SELECT items, cash, bank, cop, ems, position, bankaccount, phoneBackground, messages, statuses, houselevel, housecontent, shopcontent, shopname, mafia, fire, legal, prison, prisonreason, doc, biker, mobster, dmv, da, admin FROM users WHERE uid=?;
SQL1_INPUTS = 1

 
OUTPUT = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14-String, 15, 16, 17, 18, 19-string, 20, 21, 22, 23, 24, 25


[insertMail]
SQL1_1 = INSERT INTO mail (message, title, sender, receiver) VALUES (?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4


[insertLicense]
SQL1_1 = INSERT INTO licenses (steamid, license) VALUES (?,?)
SQL1_INPUTS = 1, 2

[deleteLicense]
SQL1_1 = DELETE FROM licenses WHERE steamid=? AND license=?;
SQL1_INPUTS = 1, 2

[getLicenses]
SQL1_1 = SELECT license FROM licenses WHERE steamid=?;
SQL1_INPUTS = 1
 
OUTPUT = 1

[getMail]
SQL1_1 = SELECT message, title, sender, date_format(created_at,'%m/%d/%Y %l:%i %p') FROM mail WHERE receiver=? ORDER BY idmail DESC LIMIT 20;
SQL1_INPUTS = 1
 
OUTPUT = 1-add_escape_quotes-String, 2-String, 3-String, 4-String

[insertMessage]
SQL1_1 = INSERT INTO messages (message, title, sender, receiver) VALUES (?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4


[getMessages]
SQL1_1 = SELECT message, title, sender, date_format(created_at,'%m/%d/%Y %l:%i %p') FROM messages WHERE receiver=? AND sender NOT LIKE '@%' ORDER BY idmessages DESC LIMIT 30;;
SQL1_INPUTS = 1
 
OUTPUT = 1-add_escape_quotes-String, 2-String, 3-String, 4-String


[insertGarage]
SQL1_1 = INSERT INTO garage (license, class, color, finish, rims, windows, lights, owner, statuses, spoiler, fuel, damage) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12


[deleteGarage]
SQL1_1 = DELETE FROM garage WHERE license=?;
SQL1_INPUTS = 1


[getGarage]
SQL1_1 = SELECT license, class, color, finish, rims, windows, lights, statuses, owner, spoiler, fuel, damage FROM garage WHERE owner=?;
SQL1_INPUTS = 1
 
OUTPUT = 1-String, 2-String, 3-String, 4-String, 5-String, 6, 7, 8, 9-string, 10, 11, 12

[getMayor]
SQL1_1 = SELECT playerguid FROM mayor WHERE id=?;
SQL1_INPUTS = 1
 
OUTPUT = 1

[updateCarStatus]
SQL1_1 = UPDATE garage SET statuses=? WHERE license=?
SQL1_INPUTS = 1, 2



[updateCarDamages]
SQL1_1 = UPDATE garage SET fuel=?, damage=? WHERE license=?
SQL1_INPUTS = 1, 2, 3




[getValue]
SQL1_1 = SELECT `value` FROM general WHERE `key`=?
SQL1_INPUTS = 1

OUTPUT = 1

[setValue]
SQL1_1 = UPDATE general SET `value`=? WHERE `key`=? 
SQL1_INPUTS = 1, 2
 

[addValue]
SQL1_1 = INSERT INTO general (key,value) VALUES (?,'')
SQL1_INPUTS = 1
 

[newLog]
SQL1_1 = INSERT INTO logs (type, description) VALUES (?,?)
SQL1_INPUTS = 1, 2
 

[approveCrime]
SQL1_1 = UPDATE wanted SET evidence=?, approved=?, approvedGUID=? WHERE caseID=?
SQL1_INPUTS = 1, 2, 3, 4

[updateCrime]
SQL1_1 = UPDATE wanted SET closed=?, closedguid=?, active=? WHERE caseID=?
SQL1_INPUTS = 1, 2, 3, 4

[closeBail]
SQL1_1 = UPDATE wanted SET closed=?, closedguid=?, active='0' WHERE suspectGUID=? AND status='4' ORDER BY caseID DESC LIMIT 1
SQL1_INPUTS = 1, 2, 3

[removeBail]
SQL1_1 = UPDATE wanted SET approved=?, approvedguid=?, evidence='1' WHERE suspectGUID=? AND status='4' ORDER BY caseID DESC LIMIT 1
SQL1_INPUTS = 1, 2, 3

[updateCrimeRemove]
SQL1_1 = UPDATE wanted SET closed=?, closedguid=?, active='0' WHERE suspectGUID=? AND active='1'
SQL1_INPUTS = 1, 2, 3


[insertCrime]
SQL1_1 = INSERT INTO wanted (suspect, suspectGUID, officer, officerGUID, charges, status, evidence, active, jailtime, approved, approvedguid, closed, closedguid) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13


[getCrimeInactive]
SQL1_1 = SELECT caseID, suspect, suspectGUID, officer, officerGUID, charges, status, evidence, active, jailtime, date_format(created_at,'%m/%d/%Y %l:%i %p'), approved, approvedGUID, closed, closedguid FROM wanted WHERE active='0' ORDER BY caseID DESC LIMIT 20;
OUTPUT = 1, 2-String, 3-String, 4-String, 5-String, 6-add_escape_quotes-String, 7, 8, 9, 10, 11-String, 12-String, 13-String, 14-String, 15-String

[getCrimeActive]
SQL1_1 = SELECT caseID, suspect, suspectGUID, officer, officerGUID, charges, status, evidence, active, jailtime, date_format(created_at,'%m/%d/%Y %l:%i %p'), approved, approvedGUID, closed, closedguid FROM wanted WHERE active='1' AND officerGUID != '"0"' AND status != '2' AND status != '4' AND status != '5' ORDER BY caseID DESC;
OUTPUT = 1, 2-String, 3-String, 4-String, 5-String, 6-add_escape_quotes-String, 7, 8, 9, 10, 11-String, 12-String, 13-String, 14-String, 15-String

[getCrimeUser]
SQL1_1 = SELECT caseID, suspect, suspectGUID, officer, officerGUID, charges, status, evidence, active, jailtime, date_format(created_at,'%m/%d/%Y %l:%i %p'), approved, approvedGUID, closed, closedguid FROM wanted WHERE suspectGUID=? ORDER BY active DESC, caseID DESC;
SQL1_INPUTS = 1

OUTPUT = 1, 2-String, 3-String, 4-String, 5-String, 6-add_escape_quotes-String, 7, 8, 9, 10, 11-String, 12-String, 13-String, 14-String, 15-String

[getTickets]
SQL1_1 = SELECT SUM(jailtime) FROM wanted WHERE suspectGUID=? AND active='1' AND status='2' AND evidence='0'
SQL1_INPUTS = 1

OUTPUT = 1

[getWarrants]
SQL1_1 = SELECT COUNT(caseID) FROM wanted WHERE suspectGUID=? AND active='1' AND status='1' AND evidence='1'
SQL1_INPUTS = 1





[updateUsersValueString]
SQL1_1 = UPDATE users
SQL1_2 =    SET $CUSTOM_1$ = ?
SQL1_3 = WHERE uid = ?;
SQL1_INPUTS = 2, 1




;;$CUSTOM_x$ allows you to insert dynamic text into an prepared statement.
;;Downside is the statement isn't cached + possible less secure. 

;;Note the order of passing inputs to extDB3 is important with custom inputs.
;; Its <inputs>:<custom_inputs>
;; So the inputs would be in this order _playerUID:_mapID:_value:_custom_1 

;;Also you can re-arrange the Input Value Order


[gangInfo]
SQL1_1 = SELECT id, owner, name, maxmembers, bank, members FROM gangs WHERE active='1' AND members LIKE ?;
SQL1_INPUTS = 1

 
OUTPUT = 1, 2-String, 3-String, 4, 5, 6

;;You can also define options for Output Value aswell if you like aswell i.e 1-STRING-BEGUID
;;Or do mixture of using INPUTS + OUTPUT Options. 
